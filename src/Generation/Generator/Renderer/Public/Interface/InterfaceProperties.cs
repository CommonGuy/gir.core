using System;
using System.Linq;
using System.Text;
using Generator.Model;

namespace Generator.Renderer.Public;

public static partial class InterfaceProperties
{
    public static string Render(GirModel.Interface @interface)
    {
        return $@"
using System;
using GObject;
using GObject.Internal;
using System.Runtime.InteropServices;

#nullable enable

namespace {Namespace.GetPublicName(@interface.Namespace)}
{{
    // AUTOGENERATED FILE - DO NOT MODIFY

    public partial interface {@interface.Name}
    {{
        ObjectHandle Handle {{ get; }}
        
        {@interface.Properties
            .Where(Property.IsEnabled)
            .Select(x => Render(@interface, x))
            .Join(Environment.NewLine)}
    }}
}}";
    }

    private static string Render(GirModel.Interface @interface, GirModel.Property property)
    {
        try
        {
            Property.ThrowIfNotSupported(@interface, property);

            var builder = new StringBuilder();
            builder.AppendLine(RenderDescriptor(@interface, property));
            builder.AppendLine(RenderAccessor(@interface, property));

            return builder.ToString();
        }
        catch (Exception ex)
        {
            var message = $"Did not generate property '{@interface.Name}.{property.Name}': {ex.Message}";

            if (ex is NotImplementedException)
                Log.Debug(message);
            else
                Log.Warning(message);

            return string.Empty;
        }
    }
}
