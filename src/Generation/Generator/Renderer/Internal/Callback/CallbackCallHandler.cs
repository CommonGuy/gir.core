using Generator.Model;

namespace Generator.Renderer.Internal;

internal static class CallbackCallHandler
{
    public static string Render(GirModel.Callback callback)
    {
        try
        {
            var handlerName = Model.Callback.GetCallHandlerName(callback);

            return $@"
using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;

#nullable enable

namespace {Namespace.GetInternalName(callback.Namespace)};

// AUTOGENERATED FILE - DO NOT MODIFY

/// <summary>
/// Call Handler for {callback.Name}. A call annotation indicates the closure should
/// be valid for the duration of the call. This handler does not implement any special
/// memory management. 
/// </summary>
{PlatformSupportAttribute.Render(callback as GirModel.PlatformDependent)}
public class {handlerName}
{{
    private {Namespace.GetPublicName(callback.Namespace)}.{callback.Name} managedCallback;

    public {Namespace.GetInternalName(callback.Namespace)}.{callback.Name} NativeCallback;

    public {handlerName}({Namespace.GetPublicName(callback.Namespace)}.{callback.Name} managed)
    {{
        managedCallback = managed;
        {CallbackCommonHandlerRenderUtils.RenderNativeCallback(callback, GirModel.Scope.Call)}
    }}
}}";
        }
        catch (System.Exception ex)
        {
            Log.Warning($"Can not generate callback call handler for {callback.Name}: {ex.Message}");
            return string.Empty;
        }
    }
}
